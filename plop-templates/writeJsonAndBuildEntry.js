const fs = require("fs");
const path = require("path");
const render = require("json-templater/string");
const { kebabCase, camelCase } = require("./utils.js");

const componentsFileName = "components.json";
const fcomponentsFileNameFilePath = path.resolve(
  __dirname,
  `../${componentsFileName}`
);

const INDEX_OUTPUT_PATH = path.resolve(__dirname, "../src/index.js");

const endOfLine = require("os").EOL;

const IMPORT_TEMPLATE = `import {{name}} from "{{path}}";`;
const INSTALL_COMPONENT_TEMPLATE = "  {{name}}";
const MAIN_TEMPLATE = `/* Automatically generated by plop buildEntryData action */

{{componentsImport}}

// 存储组件列表
const components = [
{{componentNames}}
];

// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册
const install = function(Vue) {
  // 判断是否安装
  if (install.installed) return;
  // 遍历注册全局组件
  components.forEach(component => Vue.component(component.name, component));
};

// 判断是否是直接引入文件
if (typeof window !== "undefined" && window.Vue) {
  install(window.Vue);
}

export default {
  // 导出的对象必须具有 install，才能被 Vue.use() 方法安装
  install,
  // 以下是具体的组件列表
{{componentNames}}
};
`;
module.exports = function({ name }) {
  const componentJson = require(fcomponentsFileNameFilePath);

  const kebName = kebabCase(name);

  componentJson[kebName] = `./components/${kebName}/index.js`;

  const componetsEntries = Object.entries(componentJson);

  const componentsImport = componetsEntries
    .map(([name, path]) =>
      render(IMPORT_TEMPLATE, {
        name: camelCase(name),
        path
      })
    )
    .join(endOfLine);

  const componentNames = componetsEntries
    .map(([name]) =>
      render(INSTALL_COMPONENT_TEMPLATE, { name: camelCase(name) })
    )
    .join(`,${endOfLine}`);

  fs.writeFileSync(
    fcomponentsFileNameFilePath,
    JSON.stringify(componentJson, null, "   "),
    "utf-8"
  );

  fs.writeFileSync(
    INDEX_OUTPUT_PATH,
    render(MAIN_TEMPLATE, {
      componentNames,
      componentsImport
    }),
    "utf-8"
  );

  return "write component.json and index.js is ok";
};
